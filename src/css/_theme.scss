@use "var" as *;
@mixin mode($theme) {
  * {
    color: map-get($map: $theme-colors, $key: "text-" + $theme);
  }
  background-color: map-get($map: $theme-colors, $key: "bg-" + $theme);
  a {
    &::before {
      background-color: map-get($map: $theme-colors, $key: "text-" + $theme);
    }
  }
  main {
    > section {
      background-color: map-get($map: $theme-colors, $key: "bg-" + $theme);
      &:nth-child(even) {
        background-color: map-get($map: $theme-colors, $key: "bg1-" + $theme);
      }
    }
  }

  #home {
    h1,
    h2 {
      color: map-get($map: $theme-colors, $key: "text-" + $theme);
    }
    &::before,
    &::after {
      background-color: map-get($map: $theme-colors, $key: "bg-" + $theme);
    }
    .outdated-warning {
      padding-top: 16px;
      &,
      * {
        @if $theme == "d" {
          color: gold;
        } @else {
          color: #856800;
        }
      }
    }
  }
  #about {
    * {
      color: map-get($map: $theme-colors, $key: "text-" + $theme);
    }
  }
  #skills {
    li span {
      background-color: rgba($color: map-get($map: $theme-colors, $key: "bg-" + $theme), $alpha: 0.3);
    }
  }
  #projects {
    .project {
      background-color: map-get($map: $theme-colors, $key: "bg0-" + $theme);
      .project-links {
        img {
          @if $theme == "l" {
            filter: invert(1);
          } @else {
            filter: invert(0.1);
          }
        }
      }
    }
  }
  #contact {
    > section {
      background-color: map-get($map: $theme-colors, $key: "bg2-" + $theme);
    }
  }
  .toggle-theme {
    .label {
      background-color: map-get($map: $theme-colors, $key: "text-" + $theme);
    }
    .ball {
      background-color: map-get($map: $theme-colors, $key: "bg-" + $theme);
    }
  }
  div[class^="custom-shape-divider"] .shape-fill {
    fill: map-get($map: $theme-colors, $key: "bg1-" + $theme);
  }
}
